// Code generated by protoc-gen-gogo.
// source: triggermessagebatch.proto
// DO NOT EDIT!

package weibo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TriggerMessageBatch struct {
	// Types that are valid to be assigned to TopicPresent:
	//	*TriggerMessageBatch_Topic
	TopicPresent isTriggerMessageBatch_TopicPresent `protobuf_oneof:"topic_present"`
	// Types that are valid to be assigned to FromCachePresent:
	//	*TriggerMessageBatch_FromCache
	FromCachePresent isTriggerMessageBatch_FromCachePresent `protobuf_oneof:"fromCache_present"`
	Messages         []*TriggerMessage                      `protobuf:"bytes,103,rep,name=messages" json:"messages,omitempty"`
}

func (m *TriggerMessageBatch) Reset()         { *m = TriggerMessageBatch{} }
func (m *TriggerMessageBatch) String() string { return proto.CompactTextString(m) }
func (*TriggerMessageBatch) ProtoMessage()    {}
func (*TriggerMessageBatch) Descriptor() ([]byte, []int) {
	return fileDescriptorTriggermessagebatch, []int{0}
}

type isTriggerMessageBatch_TopicPresent interface {
	isTriggerMessageBatch_TopicPresent()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTriggerMessageBatch_FromCachePresent interface {
	isTriggerMessageBatch_FromCachePresent()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TriggerMessageBatch_Topic struct {
	Topic string `protobuf:"bytes,101,opt,name=topic,proto3,oneof"`
}
type TriggerMessageBatch_FromCache struct {
	FromCache bool `protobuf:"varint,102,opt,name=fromCache,proto3,oneof"`
}

func (*TriggerMessageBatch_Topic) isTriggerMessageBatch_TopicPresent()         {}
func (*TriggerMessageBatch_FromCache) isTriggerMessageBatch_FromCachePresent() {}

func (m *TriggerMessageBatch) GetTopicPresent() isTriggerMessageBatch_TopicPresent {
	if m != nil {
		return m.TopicPresent
	}
	return nil
}
func (m *TriggerMessageBatch) GetFromCachePresent() isTriggerMessageBatch_FromCachePresent {
	if m != nil {
		return m.FromCachePresent
	}
	return nil
}

func (m *TriggerMessageBatch) GetTopic() string {
	if x, ok := m.GetTopicPresent().(*TriggerMessageBatch_Topic); ok {
		return x.Topic
	}
	return ""
}

func (m *TriggerMessageBatch) GetFromCache() bool {
	if x, ok := m.GetFromCachePresent().(*TriggerMessageBatch_FromCache); ok {
		return x.FromCache
	}
	return false
}

func (m *TriggerMessageBatch) GetMessages() []*TriggerMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TriggerMessageBatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TriggerMessageBatch_OneofMarshaler, _TriggerMessageBatch_OneofUnmarshaler, _TriggerMessageBatch_OneofSizer, []interface{}{
		(*TriggerMessageBatch_Topic)(nil),
		(*TriggerMessageBatch_FromCache)(nil),
	}
}

func _TriggerMessageBatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TriggerMessageBatch)
	// topic_present
	switch x := m.TopicPresent.(type) {
	case *TriggerMessageBatch_Topic:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Topic)
	case nil:
	default:
		return fmt.Errorf("TriggerMessageBatch.TopicPresent has unexpected type %T", x)
	}
	// fromCache_present
	switch x := m.FromCachePresent.(type) {
	case *TriggerMessageBatch_FromCache:
		t := uint64(0)
		if x.FromCache {
			t = 1
		}
		_ = b.EncodeVarint(102<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("TriggerMessageBatch.FromCachePresent has unexpected type %T", x)
	}
	return nil
}

func _TriggerMessageBatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TriggerMessageBatch)
	switch tag {
	case 101: // topic_present.topic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TopicPresent = &TriggerMessageBatch_Topic{x}
		return true, err
	case 102: // fromCache_present.fromCache
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.FromCachePresent = &TriggerMessageBatch_FromCache{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _TriggerMessageBatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TriggerMessageBatch)
	// topic_present
	switch x := m.TopicPresent.(type) {
	case *TriggerMessageBatch_Topic:
		n += proto.SizeVarint(101<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Topic)))
		n += len(x.Topic)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// fromCache_present
	switch x := m.FromCachePresent.(type) {
	case *TriggerMessageBatch_FromCache:
		n += proto.SizeVarint(102<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*TriggerMessageBatch)(nil), "weibo.TriggerMessageBatch")
}
func (m *TriggerMessageBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerMessageBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicPresent != nil {
		nn1, err := m.TopicPresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.FromCachePresent != nil {
		nn2, err := m.FromCachePresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintTriggermessagebatch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TriggerMessageBatch_Topic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintTriggermessagebatch(dAtA, i, uint64(len(m.Topic)))
	i += copy(dAtA[i:], m.Topic)
	return i, nil
}
func (m *TriggerMessageBatch_FromCache) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x6
	i++
	if m.FromCache {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func encodeFixed64Triggermessagebatch(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Triggermessagebatch(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTriggermessagebatch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TriggerMessageBatch) Size() (n int) {
	var l int
	_ = l
	if m.TopicPresent != nil {
		n += m.TopicPresent.Size()
	}
	if m.FromCachePresent != nil {
		n += m.FromCachePresent.Size()
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 2 + l + sovTriggermessagebatch(uint64(l))
		}
	}
	return n
}

func (m *TriggerMessageBatch_Topic) Size() (n int) {
	var l int
	_ = l
	l = len(m.Topic)
	n += 2 + l + sovTriggermessagebatch(uint64(l))
	return n
}
func (m *TriggerMessageBatch_FromCache) Size() (n int) {
	var l int
	_ = l
	n += 3
	return n
}

func sovTriggermessagebatch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTriggermessagebatch(x uint64) (n int) {
	return sovTriggermessagebatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TriggerMessageBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTriggermessagebatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerMessageBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerMessageBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessagebatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTriggermessagebatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicPresent = &TriggerMessageBatch_Topic{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessagebatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FromCachePresent = &TriggerMessageBatch_FromCache{b}
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessagebatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTriggermessagebatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &TriggerMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTriggermessagebatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTriggermessagebatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTriggermessagebatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTriggermessagebatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTriggermessagebatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTriggermessagebatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTriggermessagebatch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTriggermessagebatch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTriggermessagebatch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTriggermessagebatch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTriggermessagebatch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("triggermessagebatch.proto", fileDescriptorTriggermessagebatch) }

var fileDescriptorTriggermessagebatch = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x29, 0xca, 0x4c,
	0x4f, 0x4f, 0x2d, 0xca, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x4d, 0x4a, 0x2c, 0x49, 0xce, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0x4f, 0xcd, 0x4c, 0xca, 0x97, 0x12, 0x41, 0x55,
	0x01, 0x91, 0x54, 0x5a, 0xc5, 0xc8, 0x25, 0x1c, 0x02, 0x91, 0xf0, 0x85, 0x48, 0x38, 0x81, 0xb4,
	0x0a, 0x89, 0x71, 0xb1, 0x96, 0xe4, 0x17, 0x64, 0x26, 0x4b, 0xa4, 0x2a, 0x30, 0x6a, 0x70, 0x7a,
	0x30, 0x04, 0x41, 0xb8, 0x42, 0x72, 0x5c, 0x9c, 0x69, 0x45, 0xf9, 0xb9, 0xce, 0x89, 0xc9, 0x19,
	0xa9, 0x12, 0x69, 0x0a, 0x8c, 0x1a, 0x1c, 0x1e, 0x8c, 0x41, 0x08, 0x21, 0x21, 0x53, 0x2e, 0x0e,
	0xa8, 0x05, 0xc5, 0x12, 0xe9, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0xa2, 0x7a, 0x60, 0xfb, 0xf5, 0xd0,
	0x6c, 0x61, 0x12, 0x60, 0x08, 0x82, 0x2b, 0x75, 0xe2, 0xe7, 0xe2, 0x05, 0x9b, 0x1f, 0x5f, 0x50,
	0x94, 0x5a, 0x9c, 0x9a, 0x57, 0xe2, 0x24, 0xcc, 0x25, 0x08, 0x37, 0x14, 0x2e, 0xe8, 0x74, 0xe2,
	0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0xc0,
	0x25, 0x9b, 0x9c, 0x9f, 0x0b, 0x35, 0x1f, 0xea, 0x3d, 0xbd, 0xe4, 0xfc, 0xdc, 0xdc, 0xfc, 0x3c,
	0xbd, 0xa4, 0xd4, 0xc4, 0x3c, 0x27, 0x41, 0x64, 0x3f, 0x05, 0x80, 0x3c, 0x9c, 0xc4, 0x06, 0xf6,
	0xb7, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x84, 0x79, 0xaa, 0xcc, 0x31, 0x01, 0x00, 0x00,
}
