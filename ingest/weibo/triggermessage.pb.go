// Code generated by protoc-gen-gogo.
// source: triggermessage.proto
// DO NOT EDIT!

package weibo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TriggerMessage struct {
	// Types that are valid to be assigned to TopicPresent:
	//	*TriggerMessage_Topic
	TopicPresent isTriggerMessage_TopicPresent `protobuf_oneof:"topic_present"`
	// Types that are valid to be assigned to TypePresent:
	//	*TriggerMessage_Type
	TypePresent isTriggerMessage_TypePresent `protobuf_oneof:"type_present"`
	// Types that are valid to be assigned to EventPresent:
	//	*TriggerMessage_Event
	EventPresent isTriggerMessage_EventPresent `protobuf_oneof:"event_present"`
	// Types that are valid to be assigned to BodyBytesPresent:
	//	*TriggerMessage_BodyBytes
	BodyBytesPresent isTriggerMessage_BodyBytesPresent `protobuf_oneof:"bodyBytes_present"`
	// Types that are valid to be assigned to OffsetPresent:
	//	*TriggerMessage_Offset
	OffsetPresent isTriggerMessage_OffsetPresent `protobuf_oneof:"offset_present"`
	// Types that are valid to be assigned to ExtensionsPresent:
	//	*TriggerMessage_Extensions
	ExtensionsPresent isTriggerMessage_ExtensionsPresent `protobuf_oneof:"extensions_present"`
	// Types that are valid to be assigned to UuidPresent:
	//	*TriggerMessage_Uuid
	UuidPresent isTriggerMessage_UuidPresent `protobuf_oneof:"uuid_present"`
	// Types that are valid to be assigned to BidPresent:
	//	*TriggerMessage_Bid
	BidPresent isTriggerMessage_BidPresent `protobuf_oneof:"bid_present"`
}

func (m *TriggerMessage) Reset()                    { *m = TriggerMessage{} }
func (m *TriggerMessage) String() string            { return proto.CompactTextString(m) }
func (*TriggerMessage) ProtoMessage()               {}
func (*TriggerMessage) Descriptor() ([]byte, []int) { return fileDescriptorTriggermessage, []int{0} }

type isTriggerMessage_TopicPresent interface {
	isTriggerMessage_TopicPresent()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTriggerMessage_TypePresent interface {
	isTriggerMessage_TypePresent()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTriggerMessage_EventPresent interface {
	isTriggerMessage_EventPresent()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTriggerMessage_BodyBytesPresent interface {
	isTriggerMessage_BodyBytesPresent()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTriggerMessage_OffsetPresent interface {
	isTriggerMessage_OffsetPresent()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTriggerMessage_ExtensionsPresent interface {
	isTriggerMessage_ExtensionsPresent()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTriggerMessage_UuidPresent interface {
	isTriggerMessage_UuidPresent()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTriggerMessage_BidPresent interface {
	isTriggerMessage_BidPresent()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TriggerMessage_Topic struct {
	Topic string `protobuf:"bytes,101,opt,name=topic,proto3,oneof"`
}
type TriggerMessage_Type struct {
	Type string `protobuf:"bytes,102,opt,name=type,proto3,oneof"`
}
type TriggerMessage_Event struct {
	Event string `protobuf:"bytes,103,opt,name=event,proto3,oneof"`
}
type TriggerMessage_BodyBytes struct {
	BodyBytes []byte `protobuf:"bytes,104,opt,name=bodyBytes,proto3,oneof"`
}
type TriggerMessage_Offset struct {
	Offset uint64 `protobuf:"varint,105,opt,name=offset,proto3,oneof"`
}
type TriggerMessage_Extensions struct {
	Extensions string `protobuf:"bytes,106,opt,name=extensions,proto3,oneof"`
}
type TriggerMessage_Uuid struct {
	Uuid string `protobuf:"bytes,107,opt,name=uuid,proto3,oneof"`
}
type TriggerMessage_Bid struct {
	Bid int64 `protobuf:"varint,108,opt,name=bid,proto3,oneof"`
}

func (*TriggerMessage_Topic) isTriggerMessage_TopicPresent()           {}
func (*TriggerMessage_Type) isTriggerMessage_TypePresent()             {}
func (*TriggerMessage_Event) isTriggerMessage_EventPresent()           {}
func (*TriggerMessage_BodyBytes) isTriggerMessage_BodyBytesPresent()   {}
func (*TriggerMessage_Offset) isTriggerMessage_OffsetPresent()         {}
func (*TriggerMessage_Extensions) isTriggerMessage_ExtensionsPresent() {}
func (*TriggerMessage_Uuid) isTriggerMessage_UuidPresent()             {}
func (*TriggerMessage_Bid) isTriggerMessage_BidPresent()               {}

func (m *TriggerMessage) GetTopicPresent() isTriggerMessage_TopicPresent {
	if m != nil {
		return m.TopicPresent
	}
	return nil
}
func (m *TriggerMessage) GetTypePresent() isTriggerMessage_TypePresent {
	if m != nil {
		return m.TypePresent
	}
	return nil
}
func (m *TriggerMessage) GetEventPresent() isTriggerMessage_EventPresent {
	if m != nil {
		return m.EventPresent
	}
	return nil
}
func (m *TriggerMessage) GetBodyBytesPresent() isTriggerMessage_BodyBytesPresent {
	if m != nil {
		return m.BodyBytesPresent
	}
	return nil
}
func (m *TriggerMessage) GetOffsetPresent() isTriggerMessage_OffsetPresent {
	if m != nil {
		return m.OffsetPresent
	}
	return nil
}
func (m *TriggerMessage) GetExtensionsPresent() isTriggerMessage_ExtensionsPresent {
	if m != nil {
		return m.ExtensionsPresent
	}
	return nil
}
func (m *TriggerMessage) GetUuidPresent() isTriggerMessage_UuidPresent {
	if m != nil {
		return m.UuidPresent
	}
	return nil
}
func (m *TriggerMessage) GetBidPresent() isTriggerMessage_BidPresent {
	if m != nil {
		return m.BidPresent
	}
	return nil
}

func (m *TriggerMessage) GetTopic() string {
	if x, ok := m.GetTopicPresent().(*TriggerMessage_Topic); ok {
		return x.Topic
	}
	return ""
}

func (m *TriggerMessage) GetType() string {
	if x, ok := m.GetTypePresent().(*TriggerMessage_Type); ok {
		return x.Type
	}
	return ""
}

func (m *TriggerMessage) GetEvent() string {
	if x, ok := m.GetEventPresent().(*TriggerMessage_Event); ok {
		return x.Event
	}
	return ""
}

func (m *TriggerMessage) GetBodyBytes() []byte {
	if x, ok := m.GetBodyBytesPresent().(*TriggerMessage_BodyBytes); ok {
		return x.BodyBytes
	}
	return nil
}

func (m *TriggerMessage) GetOffset() uint64 {
	if x, ok := m.GetOffsetPresent().(*TriggerMessage_Offset); ok {
		return x.Offset
	}
	return 0
}

func (m *TriggerMessage) GetExtensions() string {
	if x, ok := m.GetExtensionsPresent().(*TriggerMessage_Extensions); ok {
		return x.Extensions
	}
	return ""
}

func (m *TriggerMessage) GetUuid() string {
	if x, ok := m.GetUuidPresent().(*TriggerMessage_Uuid); ok {
		return x.Uuid
	}
	return ""
}

func (m *TriggerMessage) GetBid() int64 {
	if x, ok := m.GetBidPresent().(*TriggerMessage_Bid); ok {
		return x.Bid
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TriggerMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TriggerMessage_OneofMarshaler, _TriggerMessage_OneofUnmarshaler, _TriggerMessage_OneofSizer, []interface{}{
		(*TriggerMessage_Topic)(nil),
		(*TriggerMessage_Type)(nil),
		(*TriggerMessage_Event)(nil),
		(*TriggerMessage_BodyBytes)(nil),
		(*TriggerMessage_Offset)(nil),
		(*TriggerMessage_Extensions)(nil),
		(*TriggerMessage_Uuid)(nil),
		(*TriggerMessage_Bid)(nil),
	}
}

func _TriggerMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TriggerMessage)
	// topic_present
	switch x := m.TopicPresent.(type) {
	case *TriggerMessage_Topic:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Topic)
	case nil:
	default:
		return fmt.Errorf("TriggerMessage.TopicPresent has unexpected type %T", x)
	}
	// type_present
	switch x := m.TypePresent.(type) {
	case *TriggerMessage_Type:
		_ = b.EncodeVarint(102<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Type)
	case nil:
	default:
		return fmt.Errorf("TriggerMessage.TypePresent has unexpected type %T", x)
	}
	// event_present
	switch x := m.EventPresent.(type) {
	case *TriggerMessage_Event:
		_ = b.EncodeVarint(103<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Event)
	case nil:
	default:
		return fmt.Errorf("TriggerMessage.EventPresent has unexpected type %T", x)
	}
	// bodyBytes_present
	switch x := m.BodyBytesPresent.(type) {
	case *TriggerMessage_BodyBytes:
		_ = b.EncodeVarint(104<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.BodyBytes)
	case nil:
	default:
		return fmt.Errorf("TriggerMessage.BodyBytesPresent has unexpected type %T", x)
	}
	// offset_present
	switch x := m.OffsetPresent.(type) {
	case *TriggerMessage_Offset:
		_ = b.EncodeVarint(105<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Offset))
	case nil:
	default:
		return fmt.Errorf("TriggerMessage.OffsetPresent has unexpected type %T", x)
	}
	// extensions_present
	switch x := m.ExtensionsPresent.(type) {
	case *TriggerMessage_Extensions:
		_ = b.EncodeVarint(106<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Extensions)
	case nil:
	default:
		return fmt.Errorf("TriggerMessage.ExtensionsPresent has unexpected type %T", x)
	}
	// uuid_present
	switch x := m.UuidPresent.(type) {
	case *TriggerMessage_Uuid:
		_ = b.EncodeVarint(107<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Uuid)
	case nil:
	default:
		return fmt.Errorf("TriggerMessage.UuidPresent has unexpected type %T", x)
	}
	// bid_present
	switch x := m.BidPresent.(type) {
	case *TriggerMessage_Bid:
		_ = b.EncodeVarint(108<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Bid))
	case nil:
	default:
		return fmt.Errorf("TriggerMessage.BidPresent has unexpected type %T", x)
	}
	return nil
}

func _TriggerMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TriggerMessage)
	switch tag {
	case 101: // topic_present.topic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TopicPresent = &TriggerMessage_Topic{x}
		return true, err
	case 102: // type_present.type
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TypePresent = &TriggerMessage_Type{x}
		return true, err
	case 103: // event_present.event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.EventPresent = &TriggerMessage_Event{x}
		return true, err
	case 104: // bodyBytes_present.bodyBytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.BodyBytesPresent = &TriggerMessage_BodyBytes{x}
		return true, err
	case 105: // offset_present.offset
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.OffsetPresent = &TriggerMessage_Offset{x}
		return true, err
	case 106: // extensions_present.extensions
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ExtensionsPresent = &TriggerMessage_Extensions{x}
		return true, err
	case 107: // uuid_present.uuid
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.UuidPresent = &TriggerMessage_Uuid{x}
		return true, err
	case 108: // bid_present.bid
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.BidPresent = &TriggerMessage_Bid{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TriggerMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TriggerMessage)
	// topic_present
	switch x := m.TopicPresent.(type) {
	case *TriggerMessage_Topic:
		n += proto.SizeVarint(101<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Topic)))
		n += len(x.Topic)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// type_present
	switch x := m.TypePresent.(type) {
	case *TriggerMessage_Type:
		n += proto.SizeVarint(102<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Type)))
		n += len(x.Type)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// event_present
	switch x := m.EventPresent.(type) {
	case *TriggerMessage_Event:
		n += proto.SizeVarint(103<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Event)))
		n += len(x.Event)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// bodyBytes_present
	switch x := m.BodyBytesPresent.(type) {
	case *TriggerMessage_BodyBytes:
		n += proto.SizeVarint(104<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BodyBytes)))
		n += len(x.BodyBytes)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// offset_present
	switch x := m.OffsetPresent.(type) {
	case *TriggerMessage_Offset:
		n += proto.SizeVarint(105<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Offset))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// extensions_present
	switch x := m.ExtensionsPresent.(type) {
	case *TriggerMessage_Extensions:
		n += proto.SizeVarint(106<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Extensions)))
		n += len(x.Extensions)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// uuid_present
	switch x := m.UuidPresent.(type) {
	case *TriggerMessage_Uuid:
		n += proto.SizeVarint(107<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Uuid)))
		n += len(x.Uuid)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// bid_present
	switch x := m.BidPresent.(type) {
	case *TriggerMessage_Bid:
		n += proto.SizeVarint(108<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Bid))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*TriggerMessage)(nil), "weibo.TriggerMessage")
}
func (m *TriggerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TopicPresent != nil {
		nn1, err := m.TopicPresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.TypePresent != nil {
		nn2, err := m.TypePresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.EventPresent != nil {
		nn3, err := m.EventPresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.BodyBytesPresent != nil {
		nn4, err := m.BodyBytesPresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	if m.OffsetPresent != nil {
		nn5, err := m.OffsetPresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.ExtensionsPresent != nil {
		nn6, err := m.ExtensionsPresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if m.UuidPresent != nil {
		nn7, err := m.UuidPresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	if m.BidPresent != nil {
		nn8, err := m.BidPresent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *TriggerMessage_Topic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintTriggermessage(dAtA, i, uint64(len(m.Topic)))
	i += copy(dAtA[i:], m.Topic)
	return i, nil
}
func (m *TriggerMessage_Type) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintTriggermessage(dAtA, i, uint64(len(m.Type)))
	i += copy(dAtA[i:], m.Type)
	return i, nil
}
func (m *TriggerMessage_Event) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintTriggermessage(dAtA, i, uint64(len(m.Event)))
	i += copy(dAtA[i:], m.Event)
	return i, nil
}
func (m *TriggerMessage_BodyBytes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BodyBytes != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTriggermessage(dAtA, i, uint64(len(m.BodyBytes)))
		i += copy(dAtA[i:], m.BodyBytes)
	}
	return i, nil
}
func (m *TriggerMessage_Offset) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintTriggermessage(dAtA, i, uint64(m.Offset))
	return i, nil
}
func (m *TriggerMessage_Extensions) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintTriggermessage(dAtA, i, uint64(len(m.Extensions)))
	i += copy(dAtA[i:], m.Extensions)
	return i, nil
}
func (m *TriggerMessage_Uuid) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintTriggermessage(dAtA, i, uint64(len(m.Uuid)))
	i += copy(dAtA[i:], m.Uuid)
	return i, nil
}
func (m *TriggerMessage_Bid) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x6
	i++
	i = encodeVarintTriggermessage(dAtA, i, uint64(m.Bid))
	return i, nil
}
func encodeFixed64Triggermessage(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Triggermessage(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTriggermessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TriggerMessage) Size() (n int) {
	var l int
	_ = l
	if m.TopicPresent != nil {
		n += m.TopicPresent.Size()
	}
	if m.TypePresent != nil {
		n += m.TypePresent.Size()
	}
	if m.EventPresent != nil {
		n += m.EventPresent.Size()
	}
	if m.BodyBytesPresent != nil {
		n += m.BodyBytesPresent.Size()
	}
	if m.OffsetPresent != nil {
		n += m.OffsetPresent.Size()
	}
	if m.ExtensionsPresent != nil {
		n += m.ExtensionsPresent.Size()
	}
	if m.UuidPresent != nil {
		n += m.UuidPresent.Size()
	}
	if m.BidPresent != nil {
		n += m.BidPresent.Size()
	}
	return n
}

func (m *TriggerMessage_Topic) Size() (n int) {
	var l int
	_ = l
	l = len(m.Topic)
	n += 2 + l + sovTriggermessage(uint64(l))
	return n
}
func (m *TriggerMessage_Type) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	n += 2 + l + sovTriggermessage(uint64(l))
	return n
}
func (m *TriggerMessage_Event) Size() (n int) {
	var l int
	_ = l
	l = len(m.Event)
	n += 2 + l + sovTriggermessage(uint64(l))
	return n
}
func (m *TriggerMessage_BodyBytes) Size() (n int) {
	var l int
	_ = l
	if m.BodyBytes != nil {
		l = len(m.BodyBytes)
		n += 2 + l + sovTriggermessage(uint64(l))
	}
	return n
}
func (m *TriggerMessage_Offset) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovTriggermessage(uint64(m.Offset))
	return n
}
func (m *TriggerMessage_Extensions) Size() (n int) {
	var l int
	_ = l
	l = len(m.Extensions)
	n += 2 + l + sovTriggermessage(uint64(l))
	return n
}
func (m *TriggerMessage_Uuid) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	n += 2 + l + sovTriggermessage(uint64(l))
	return n
}
func (m *TriggerMessage_Bid) Size() (n int) {
	var l int
	_ = l
	n += 2 + sovTriggermessage(uint64(m.Bid))
	return n
}

func sovTriggermessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTriggermessage(x uint64) (n int) {
	return sovTriggermessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TriggerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTriggermessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTriggermessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicPresent = &TriggerMessage_Topic{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTriggermessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypePresent = &TriggerMessage_Type{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTriggermessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventPresent = &TriggerMessage_Event{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTriggermessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.BodyBytesPresent = &TriggerMessage_BodyBytes{v}
			iNdEx = postIndex
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OffsetPresent = &TriggerMessage_Offset{v}
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTriggermessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionsPresent = &TriggerMessage_Extensions{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTriggermessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UuidPresent = &TriggerMessage_Uuid{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 108:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTriggermessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BidPresent = &TriggerMessage_Bid{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTriggermessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTriggermessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTriggermessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTriggermessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTriggermessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTriggermessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTriggermessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTriggermessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTriggermessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTriggermessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTriggermessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("triggermessage.proto", fileDescriptorTriggermessage) }

var fileDescriptorTriggermessage = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x46, 0xeb, 0xfe, 0xa1, 0x5e, 0xfa, 0x03, 0xa6, 0x42, 0x5e, 0x88, 0x22, 0xa6, 0x4c, 0x59,
	0x98, 0x59, 0x32, 0x65, 0x41, 0x42, 0x16, 0x3b, 0xaa, 0xdb, 0xdb, 0x60, 0x20, 0x76, 0x14, 0xbb,
	0x40, 0xdf, 0x84, 0x47, 0x62, 0xe4, 0x11, 0x50, 0xd9, 0x78, 0x0a, 0x64, 0x27, 0x72, 0x33, 0x9e,
	0x73, 0x2d, 0xeb, 0x48, 0x1f, 0x2c, 0x6d, 0x2d, 0x8b, 0x02, 0xeb, 0x12, 0x8d, 0x59, 0x15, 0x98,
	0x56, 0xb5, 0xb6, 0x9a, 0x8e, 0xde, 0x51, 0x0a, 0x7d, 0xfd, 0xd7, 0x87, 0xf9, 0x43, 0x73, 0xbf,
	0x6b, 0xee, 0xf4, 0x12, 0x46, 0x56, 0x57, 0x72, 0xcd, 0x30, 0x26, 0xc9, 0x24, 0xef, 0xf1, 0x06,
	0xe9, 0x12, 0x86, 0x76, 0x5f, 0x21, 0xdb, 0x7a, 0x4d, 0xb8, 0x27, 0xf7, 0x1a, 0xdf, 0x50, 0x59,
	0x56, 0x78, 0xdd, 0xe7, 0x0d, 0xd2, 0x08, 0x26, 0x42, 0x6f, 0xf6, 0xd9, 0xde, 0xa2, 0x61, 0x4f,
	0x31, 0x49, 0xa6, 0xf9, 0x80, 0x1f, 0x15, 0x65, 0x30, 0xd6, 0xdb, 0xad, 0x41, 0xcb, 0x64, 0x4c,
	0x92, 0x61, 0x3e, 0xe4, 0x2d, 0xd3, 0x18, 0x00, 0x3f, 0x2c, 0x2a, 0x23, 0xb5, 0x32, 0xec, 0xd9,
	0x7f, 0x3b, 0xe2, 0x1d, 0xe7, 0x4a, 0x76, 0x3b, 0xb9, 0x61, 0x2f, 0xfe, 0x36, 0xe6, 0x9e, 0x28,
	0x85, 0x81, 0x90, 0x1b, 0xf6, 0x1a, 0x93, 0x64, 0x90, 0x9f, 0x70, 0x07, 0xd9, 0x02, 0x66, 0x3e,
	0xfe, 0xb1, 0xaa, 0xd1, 0xa0, 0xb2, 0xd9, 0x1c, 0xa6, 0x2e, 0x3b, 0xf0, 0x02, 0x66, 0xbe, 0x37,
	0x88, 0x0b, 0x38, 0x0f, 0x91, 0x41, 0x9e, 0xc1, 0xbc, 0x89, 0x0b, 0x66, 0x09, 0xf4, 0x18, 0xd4,
	0xfd, 0xdd, 0xa5, 0x04, 0x9e, 0xc1, 0xa9, 0xe8, 0xe0, 0xed, 0xd7, 0x21, 0x22, 0xdf, 0x87, 0x88,
	0xfc, 0x1c, 0x22, 0xf2, 0xf9, 0x1b, 0xf5, 0xe0, 0x6a, 0xad, 0xcb, 0xd4, 0x2f, 0x91, 0xb6, 0x2b,
	0xa5, 0x6b, 0x5d, 0x96, 0x5a, 0xa5, 0x02, 0x57, 0x2a, 0x9b, 0xb6, 0x9b, 0xdc, 0xbb, 0xc9, 0xc4,
	0xd8, 0x2f, 0x77, 0xf3, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x62, 0x19, 0x41, 0xfa, 0xd1, 0x01, 0x00,
	0x00,
}
